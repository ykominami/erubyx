#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'mkspec'
require 'pp'
# You can add fixtures and/or initialization code here to make experimenting
# with your gem easier. You can also use a different console, if you like.

# (If you use this, don't forget to add pry to your Gemfile!)
# require 'pry'
# Pry.start

# require 'irb'
# IRB.start(__FILE__)

exit_code = nil
mkscript = Mkspec::Mkscript.new(ARGV)
exit_code = mkscript.check_state_and_show_useage_and_state_message
exit(exit_code) if exit_code
begin
  mkscript.create_files
rescue Mkspec::MkspecDebugError => e
  pp e.message
  pp e.backtrace.join("\n")
  if Mkspec::STATE.success?
    exit_code = Mkspec::MKSPEC_DEBUG_ERROR
  else
    exit_code = Mkspec::STATE.show_message
  end
  # exit(exit_code)
rescue Mkspec::MkspecAppError => e
  pp e.message
  pp e.backtrace.join("\n")
  if Mkspec::STATE.success?
    exit_code = Mkspec::MKSPEC_APP_ERROR
  else
    exit_code = Mkspec::STATE.show_message
  end
  # exit(exit_code)
rescue => e
  pp "###################### 1"
  exit_code = Mkspec::STATE.show_message
end
unless exit_code
  pp "###################### 2"
  exit_code = Mkspec::STATE.show_message
else
  exit_code = 0
end
exit(exit_code)
